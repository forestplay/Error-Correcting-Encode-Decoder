type: edu
custom_name: stage4
files:
- name: test/CorrecterTest.java
  visible: false
  text: |+
    import correcter.Main;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.util.ArrayList;
    import java.util.List;

    class TestClue {
        String input;
        String fileContent;

        TestClue(String input, String fileContent) {
            this.input = input;
            this.fileContent = fileContent;
        }
    }

    public class CorrecterTest extends StageTest<TestClue> {

        private static File received = null;
        private static File encoded = null;
        private static File decoded = null;

        public CorrecterTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            TestClue[] testClues = new TestClue[] {
                new TestClue("encode", "Eat more of these french buns!"),
                new TestClue("send",   "Eat more of these french buns!"),
                new TestClue("decode", "Eat more of these french buns!"),

                new TestClue("encode", "$ome rand0m messAge"),
                new TestClue("send",   "$ome rand0m messAge"),
                new TestClue("decode", "$ome rand0m messAge"),

                new TestClue("encode", "better call Saul 555-00-73!"),
                new TestClue("send",   "better call Saul 555-00-73!"),
                new TestClue("decode", "better call Saul 555-00-73!"),

                new TestClue("encode", "5548172 6548 225147 23656595 5155"),
                new TestClue("send",   "5548172 6548 225147 23656595 5155"),
                new TestClue("decode", "5548172 6548 225147 23656595 5155"),
            };

            List<TestCase<TestClue>> result = new ArrayList<>();

            for (int i = 0; i < testClues.length; i++) {
                result.add(new TestCase<TestClue>()
                    .setAttach(testClues[i])
                    .setInput(testClues[i].input)
                    .addFile("send.txt", testClues[i].fileContent));
            }

            return result;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String path = System.getProperty("user.dir");

            received = null;
            encoded = null;
            decoded = null;

            searchReceived(path, "received.txt");
            searchEncoded(path, "encoded.txt");
            searchDecoded(path, "decoded.txt");

            String correctFileBinary = toBinary(clue.fileContent.getBytes());
            String correctFileEncoded = encodeFile(correctFileBinary);

            String action = clue.input;

            if (action.equals("encode")) {

                if (encoded == null) {
                    System.out.println("here1");
                    return new CheckResult(false,
                        "Can't find encoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] encodedContent;
                FileInputStream encodedStream;

                try {
                    encodedStream = new FileInputStream(encoded);
                } catch (FileNotFoundException e) {
                    System.out.println("here2");
                    return new CheckResult(false,
                        "Can't find encoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    encodedContent = encodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    System.out.println("here3");
                    throw new RuntimeException("Can't read the file");
                }

                String encodedBinary = toBinary(encodedContent);

                return new CheckResult(encodedBinary.equals(correctFileEncoded));
            }

            if (action.equals("send")) {

                if (received == null) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it " +
                            "down or make sure the name of file is correct.");
                }

                byte[] receivedContent;

                FileInputStream receivedStream;

                try {
                    receivedStream = new FileInputStream(received);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    receivedContent = receivedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String receivedBinary = toBinary(receivedContent);


                return checkDifference(receivedBinary, correctFileEncoded);
            }



            if (action.equals("decode")) {

                if (decoded == null) {
                    return new CheckResult(false,
                        "Can't find decoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] decodedContent;


                FileInputStream decodedStream;

                try {
                    decodedStream = new FileInputStream(decoded);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    decodedContent = decodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String decodedBinary = toBinary(decodedContent);

                if (!decodedBinary.equals(correctFileBinary)) {
                    return new CheckResult(false, "The decoded text must match initial text!");
                }

                return CheckResult.correct();
            }

            throw new RuntimeException("Can't check the program");
        }

        private static String toBinary(byte[] bytes) {
            StringBuilder sb = new StringBuilder(bytes.length * Byte.SIZE);
            for (int i = 0; i < Byte.SIZE * bytes.length; i++) {
                sb.append((bytes[i / Byte.SIZE] << i % Byte.SIZE & 0x80) == 0 ? '0' : '1');
            }
            return sb.toString();
        }

        private static byte[] fromBinary(String s) {
            int sLen = s.length();
            byte[] toReturn = new byte[(sLen + Byte.SIZE - 1) / Byte.SIZE];
            char c;
            for (int i = 0; i < sLen; i++)
                if ((c = s.charAt(i)) == '1')
                    toReturn[i / Byte.SIZE] = (byte) (toReturn[i / Byte.SIZE] | (0x80 >>> (i % Byte.SIZE)));
                else if (c != '0')
                    throw new IllegalArgumentException();
            return toReturn;
        }

        private static void searchReceived(String dirName, String fileName) {
            File dir = new File(dirName);
            File[] list = dir.listFiles();

            if (list != null) {
                for (File f : list) {
                    if (f.isDirectory()) {
                        searchReceived(f.getAbsolutePath(), fileName);
                    } else if (f.getAbsolutePath().contains(fileName)) {
                        received = f;
                    }
                }
            }
        }

        private static void searchEncoded(String dirName, String fileName) {
            File dir = new File(dirName);
            File[] list = dir.listFiles();

            if (list != null) {
                for (File f : list) {
                    if (f.isDirectory()) {
                        searchEncoded(f.getAbsolutePath(), fileName);
                    } else if (f.getAbsolutePath().contains(fileName)) {
                        encoded = f;
                    }
                }
            }
        }

        private static void searchDecoded(String dirName, String fileName) {
            File dir = new File(dirName);
            File[] list = dir.listFiles();

            if (list != null) {
                for (File f : list) {
                    if (f.isDirectory()) {
                        searchDecoded(f.getAbsolutePath(), fileName);
                    } else if (f.getAbsolutePath().contains(fileName)) {
                        decoded = f;
                    }
                }
            }
        }

        private String encodeFile(String binaryString) {

            String encoded = "";

            for (int i = 0; i < binaryString.length(); i += 3) {

                int startSubIndex = i;
                int stopSubIndex = Math.min(i+3, binaryString.length());

                String currSub = binaryString.substring(startSubIndex, stopSubIndex);

                String encodedPart;

                if (currSub.length() == 3) {
                    encodedPart =
                        currSub.substring(0, 1).repeat(2) +
                        currSub.substring(1, 2).repeat(2) +
                        currSub.substring(2, 3).repeat(2);
                } else if (currSub.length() == 2) {
                    encodedPart =
                        currSub.substring(0, 1).repeat(2) +
                        currSub.substring(1, 2).repeat(2) + "00";
                } else if (currSub.length() == 1) {
                    encodedPart =
                        currSub.substring(0, 1).repeat(2) + "0000";
                } else {
                    encodedPart = "000000";
                }

                int parityCounts = 0;

                if (encodedPart.charAt(0) == '1') {
                    parityCounts++;
                }

                if (encodedPart.charAt(2) == '1') {
                    parityCounts++;
                }

                if (encodedPart.charAt(4) == '1') {
                    parityCounts++;
                }

                if (parityCounts % 2 == 1) {
                    encodedPart += "11";
                } else {
                    encodedPart += "00";
                }

                encoded += encodedPart;
            }

            return encoded;
        }

        private CheckResult checkDifference(String output, String correct) {
            if (output.isEmpty() && correct.isEmpty()) return CheckResult.correct();

            if (output.length() != correct.length()) {
                return new CheckResult(false,
                    "The program was expected to output " +
                        correct.length() / 8 +
                        " bytes, but output " +
                        output.length() / 8);
            }

            for (int i = 0; i < output.length(); i += 8) {
                String currOutputByte = output.substring(i, i+8);
                String currCorrectByte = correct.substring(i, i+8);

                int difference = 0;
                for (int j = 0; j < currCorrectByte.length(); j++) {
                    char currOutputBit = currOutputByte.charAt(j);
                    char currCorrectBit = currCorrectByte.charAt(j);

                    if (currCorrectBit != currOutputBit) {
                        difference++;
                    }
                }

                if (difference == 0) {
                    return new CheckResult(false,
                        "One of bytes from the input stayed the same but should be changed");
                }

                if (difference != 1) {
                    return new CheckResult(false,
                        "One of bytes from the input was changes in more than one bit");
                }
            }

            return CheckResult.correct();
        }
    }

  learner_created: false
- name: src/correcter/Main.java
  visible: true
  text: |+
    package correcter;

    import java.io.File;
    import java.io.FileWriter;
    import java.util.Random;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {

            try {
                File sendText = new File("send.txt");
                Scanner scanner = new Scanner(sendText);
                FileWriter receivedText = new FileWriter("received.txt");

                while (scanner.hasNext()) {
                    String inputString = scanner.nextLine();
    //              String inputString = "abcdefgh";
                    int errors = 1;
                    int groupSize = 3;
    //                System.out.println(inputString);

                    byte[] inputCharArray = inputString.getBytes();
                    for (byte oneByte: inputCharArray){
                        byte byteWithError = randomizeBits(oneByte, errors);
                        receivedText.write(byteWithError);
                    }
                    scanner.close();
                    receivedText.close();

    //                String sentString = repeatSymbols(inputString, groupSize);
    //                System.out.println(sentString);
    //                String receivedString = randomizeOneChar(sentString, errors, groupSize);
    //                System.out.println(receivedString);

    //                String correctedString = fixErrors(receivedString, groupSize);
    //                System.out.println(correctedString);
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }


        public static String randomizeOneChar(String inputString, int errors, int groupSize) {
            String newChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789";
            Random random = new Random(System.currentTimeMillis());
            StringBuilder newString = new StringBuilder(inputString);

            int i = 0;
            do {
                for (int j = 0; j < errors; j++) {
                    int charIndex = random.nextInt(groupSize);
                    Character newChar = newChars.charAt(random.nextInt(newChars.length()));
                    newString.setCharAt(i + j + charIndex, newChar);
                }
                i += groupSize;
            } while (i <= inputString.length() - groupSize);
            return newString.toString();
        }

        public static byte randomizeBits(byte inputByte, int errors) {
            Random random = new Random(System.currentTimeMillis());
            byte[] errorBytes = new byte[]{1, 2, 4, 8, 16, 32, 64, (byte)128};

            byte errorBit = errorBytes[random.nextInt(8)];
            byte byteWithErrors = (byte) (inputByte ^ errorBit);

            byte outputByte = byteWithErrors;

            return outputByte;
        }

        public static String repeatSymbols(String inputString, int repeatInterval) {
            StringBuilder newString = new StringBuilder("");
            for (Character i : inputString.toCharArray()) {
                for (int r = 0; r < repeatInterval; r++)
                    newString.append(i);
            }
            return newString.toString();
        }

        public static String fixErrors(String inputString, int groupSize) {
            StringBuilder newString = new StringBuilder("");
            String regex = ".*([\\w\\W])\\1+.*";

            int i = 0;
            do {
                char newChar;
                String group = inputString.substring(i, i + groupSize);
                if (group.matches(regex))
                    newChar = group.charAt(1);
                else
                    newChar = group.charAt(0);
                newString.append(newChar);
                i += groupSize;
            } while (i <= inputString.length() - groupSize);


            return newString.toString();
        }
    }

  learner_created: true
- name: received.txt
  visible: true
  text: ==<09?:(>=<0(::=9<?(:;>=>=1=(=9==
  learner_created: true
- name: encoded.txt
  visible: true
  learner_created: true
- name: decoded.txt
  visible: true
  learner_created: true
- name: send.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/58/stages/315/implement
status: Solved
record: -1
